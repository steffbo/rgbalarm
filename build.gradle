plugins {
    id "groovy"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id 'org.hidetake.ssh' version "2.10.1"
}

version "0.1"
group "es.woofl"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    compileOnly platform("io.micronaut:micronaut-bom:$micronautVersion")
    compileOnly "io.micronaut:micronaut-inject-groovy"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-runtime-groovy"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
//    testCompileOnly platform("io.micronaut:micronaut-bom:$micronautVersion")
//    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
//    testImplementation("org.spockframework:spock-core") {
//        exclude group: "org.codehaus.groovy", module: "groovy-all"
//    }
//    testImplementation "io.micronaut:micronaut-inject-groovy"
//    testImplementation "io.micronaut.test:micronaut-test-spock"
//    testImplementation "io.micronaut.test:micronaut-test-junit5"
//    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.5.0"

//    compile "io.micronaut.configuration:micronaut-hibernate-jpa"
//    compile "io.micronaut.configuration:micronaut-jdbc-hikari"
//    compile "io.micronaut.configuration:micronaut-hibernate-validator"
//    runtime "com.h2database:h2"
}

test.classpath += configurations.developmentOnly

mainClassName = "es.woofl.Application"

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

remotes {
    webServer {
        host = '192.168.1.190'
        user = 'pi'
        identity = file('key.ppk')
    }
}

task deploy(dependsOn: assemble) {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                put from: '/build/libs/rgbalarm-0.1-all.jar', into: '/tmp'
                execute 'sudo mv /tmp/rgbalarm-0.1-all.jar /opt/rgbalarm/'
                execute 'sudo java -jar /opt/rgbalarm/rgbalarm-0.1-all.jar 2>&1 >> /dev/null &'
            }
        }
    }
}